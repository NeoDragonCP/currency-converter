{"version":3,"sources":["components/StyledElements/StyledRow.jsx","components/Card.jsx","components/ToggleSwitch.js","App.js","serviceWorker.js","index.js"],"names":["StyledRow","styled","div","props","theme","secondaryBgColor","CardContainer","cardBG","borderRadius","CardHeader","secondaryActionColor","primaryFontColor","primaryBGColor","CardBody","primaryActionColor","Card","currencyOptions","selectedCurrency","onChangeCurrency","amount","onChangeAmount","onBlur","symbolMap","Map","set","src","undefined","trimmedCountryCode","slice","trimCurrencyStringAndReturnFlagURL","alt","tabIndex","value","onChange","map","o","key","get","type","placeholder","min","step","StyledSwitch","width","ToggleSwitch","isOn","handleToggle","onColor","checked","className","id","style","background","htmlFor","BASE_URL","GlobalStyles","createGlobalStyle","themeDark","cardHeaderBG","mediaQuerySize","MEDIA_QUERY_SIZE","themeLight","AppContainer","StyledHeader","h1","StyledButton","motion","button","Boolean","window","location","hostname","match","ReactDOM","render","useState","useDarkTheme","setUseDarkTheme","currentTheme","fromAmount","toAmount","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","cleanValueToTwoDecimalPlaces","passedValue","parseFloat","toFixed","useEffect","fetch","then","res","json","data","firstToCurrency","Object","keys","rates","base","e","target","whileHover","scale","whileTap","onClick","_leftCurrency","_rightCurrency","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aaa621f3.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst StyledRow = styled.div`\n  width: 100vw;\n  background: ${props => props.theme.secondaryBgColor};\n  padding-top: 2rem;\n  padding-bottom: 2rem;\n  padding-left: 1rem;\n  padding-right:1rem;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  @media only screen and (max-width: 700px) {\n    flex-direction: column;\n    align-items: flex-start;\n    padding-left: 4px;\n  }\n`;\n\nexport default StyledRow;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst CardContainer = styled.div`\n  width: 400px;\n  height: 240px;\n  background-color: ${props => props.theme.cardBG};\n  border-radius: ${props => props.theme.borderRadius};\n  box-shadow: 0px 4px 10px 0px rgba(0, 0, 0, 0.2);\n  overflow: hidden;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst CardHeader = styled.div`\n  width: 100%;\n  height: 4rem;\n  padding-left: 1rem;\n  background: linear-gradient(90deg, #00adb5 0%, #583bb8 100%);\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  color: white;\n\n  > select {\n    width: 78%;\n    height: 90%;\n    margin-left: 0.5rem;\n    color: white;\n    background: transparent;\n    outline: none;\n    border: none;\n    font-size: 1.2rem;\n\n    :focus {\n      border: 1px solid ${props => props.theme.secondaryActionColor};\n      border-radius: 6px;\n      /*\n      background-color: ${props => props.theme.primaryFontColor};\n      color: ${props => props.theme.primaryBGColor};\n      */\n    }\n\n    /* style the dropdown options too */\n    > option {\n      background-color: ${props => props.theme.secondaryBgColor};\n      color: ${props => props.theme.primaryFontColor};\n    }\n  }\n`;\n\nconst CardBody = styled.div`\n  width: 100%;\n  height: 100%;\n  padding-left: 1rem;\n  background-color: ${props => props.theme.cardBG};\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  color: ${props => props.theme.primaryFontColor};\n  font-size:2rem;\n\n  > input {\n    width: 90%;\n    height: 80%;\n    background-color: transparent;\n    outline: none;\n    border: none;\n    color: ${props => props.theme.primaryFontColor};\n    font-size: 4rem;\n    padding: 0.2rem;\n    margin-left: 0.2rem;\n\n    :focus {\n      border: 1px solid ${props => props.theme.primaryActionColor};\n      border-radius: 6px;\n    }\n\n    /* Disable input buttons for numbers \"spinners\" */\n    ::-webkit-inner-spin-button,\n    ::-webkit-outer-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n  }\n`;\n\nexport default function Card(props) {\n\n  const {\n    currencyOptions,\n    selectedCurrency,\n    onChangeCurrency,\n    amount,\n    onChangeAmount,\n    onBlur\n  } = props;\n\n\n// Create a map with the currecy code and it's symbol\nlet symbolMap = new Map();\n\n// Chain through and add links to the symbol for each selected currency value\nsymbolMap.set(\"EUR\",\"€\")\n.set(\"CAD\",\"C$\")\n.set(\"HKD\",\"HK$\")\n.set(\"ISK\",\"kr\")\n.set(\"PHP\",\"₱\")\n.set(\"DKK\",\"Kr\")\n.set(\"HUF\",\"Ft\")\n.set(\"DKK\",\"Kr\")\n.set(\"CZK\",\"Kč\")\n.set(\"AUD\",\"A$\")\n.set(\"RON\",\"lei\")\n.set(\"SEK\",\"Kr\")\n.set(\"IDR\",\"Rp\")\n.set(\"INR\",\"₹\")\n.set(\"BRL\",\"R$\")\n.set(\"RUB\",\"₽\")\n.set(\"HRK\",\"Kn\")\n.set(\"JPY\",\"¥\")\n.set(\"THB\",\"฿\")\n.set(\"CHF\",\"Fr\")\n.set(\"SGD\",\"S$\")\n.set(\"PLN\",\"zł\")\n.set(\"BGN\",\"Лв\")\n.set(\"TRY\",\"₺\")\n.set(\"CNY\",\"¥\")\n.set(\"NOK\",\"kr\")\n.set(\"NZD\",\"NZ$\")\n.set(\"ZAR\",\"R\")\n.set(\"ZAR\",\"R\")\n.set(\"USD\",\"US$\")\n.set(\"MXN\",\"Mex$\")\n.set(\"ILS\",\"₪\")\n.set(\"GBP\",\"£\")\n.set(\"KRW\",\"₩\")\n.set(\"MYR\",\"RM\");\n\n\nfunction getCorrectSymbol(){\n  return symbolMap.get(selectedCurrency);\n}\n\n// For flag, just trim the last letter off the currency code\n// Insert that into the countryflags API\nfunction trimCurrencyStringAndReturnFlagURL(){\n  if (selectedCurrency !== undefined){\n  let tempString = `${selectedCurrency}`;\n  let trimmedCountryCode = tempString.slice(0,-1);\n  let fullURLForFLag = `https://www.countryflags.io/${trimmedCountryCode}/flat/64.png`;\n  return fullURLForFLag;\n  }\n}\n\n\n  return (\n    <CardContainer>\n      <CardHeader>\n        <img src={trimCurrencyStringAndReturnFlagURL()} alt=\"flag\" />\n        <select\n          tabIndex=\"1\"\n          value={selectedCurrency}\n          onChange={onChangeCurrency}\n        >\n          {currencyOptions.map(o => (\n            <option key={o} value={o}>\n              {o}\n            </option>\n          ))}\n        </select>\n      </CardHeader>\n      <CardBody>\n        <p>{getCorrectSymbol()}</p>\n        <input\n          type=\"number\"\n          placeholder=\"0\"\n          tabIndex=\"2\"\n          min=\"0\"\n          step=\"0.1\"\n          value={amount}\n          onChange={onChangeAmount}\n          onBlur={onBlur}\n        />\n      </CardBody>\n    </CardContainer>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledSwitch = styled.div`\n  .react-switch-checkbox {\n    height: 0;\n    width: 0;\n    visibility: hidden;\n  }\n\n  .react-switch-label {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    cursor: pointer;\n    width: ${props => props.width || \"60px\"};\n    height: calc(${props => props.width || \"60px\"} / 2);\n    background: grey;\n    border-radius: ${props => props.width || \"60px\"};\n    position: relative;\n    transition: background-color 0.2s;\n  }\n\n  .react-switch-label .react-switch-button {\n    content: \"\";\n    position: absolute;\n    top: 10%;\n    left: 2px;\n    width: 40%;\n    height: 80%;\n    border-radius: 100%;\n    transition: 0.2s;\n    background: #fff;\n    box-shadow: 0 0 2px 0 rgba(10, 10, 10, 0.29);\n  }\n\n  .react-switch-checkbox:checked + .react-switch-label .react-switch-button {\n    left: calc(100% - 2px);\n    transform: translateX(-100%);\n  }\n\n  .react-switch-label:active .react-switch-button {\n    width: calc(${props => props.width || \"60px\"} / 2);\n  }\n`;\n\nconst ToggleSwitch = ({ isOn, handleToggle, onColor, width }) => {\n  return (\n    <StyledSwitch width={width}>\n      <input\n        checked={isOn}\n        onChange={handleToggle}\n        className=\"react-switch-checkbox\"\n        id={`react-switch-new`}\n        type=\"checkbox\"\n      />\n      <label\n        style={{ background: isOn && onColor }}\n        className=\"react-switch-label\"\n        htmlFor={`react-switch-new`}\n      >\n        <span className={`react-switch-button`} />\n      </label>\n    </StyledSwitch>\n  );\n};\n\nexport default ToggleSwitch;\n","import React, { useEffect, useState } from \"react\";\nimport styled, { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport { motion } from \"framer-motion\";\n\nimport { StyledRow } from \"./components/StyledElements\";\nimport Card from \"./components/Card\";\nimport ToggleSwitch from \"./components/ToggleSwitch\";\n\nconst BASE_URL = \"https://api.exchangeratesapi.io/latest\";\nconst MEDIA_QUERY_SIZE = \"700px\";\n\nconst GlobalStyles = createGlobalStyle`\n  *{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }`;\n\nconst themeDark = {\n  primaryBGColor: \"#121212\",\n  secondaryBgColor: \"#212121\",\n\n  primaryActionColor: \"#00adb5\",\n  secondaryActionColor: \"#b83b5e\",\n\n  primaryFontColor: \"#ffff\",\n\n  cardBG: \"#121212\",\n  cardHeaderBG: \"#1769aa\",\n  borderRadius: \"30px\",\n  mediaQuerySize: { MEDIA_QUERY_SIZE }\n};\n\nconst themeLight = {\n  primaryBGColor: \"#ffff\",\n  secondaryBgColor: \"#EBEBEB\",\n\n  primaryActionColor: \"#00adb5\",\n  secondaryActionColor: \"#b83b5e\",\n\n  primaryFontColor: \"#404040\",\n\n  cardBG: \"#ffff\",\n  borderRadius: \"30px\",\n  mediaQuerySize: { MEDIA_QUERY_SIZE }\n};\n\nconst AppContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: absolute;\n  background-color: ${props => props.theme.primaryBGColor};\n  color: ${props => props.theme.primaryFontColor};\n\n  display: flex;\n  flex-direction: column;\n\n  @media only screen and (min-width: ${MEDIA_QUERY_SIZE}) {\n    justify-content: center;\n  }\n`;\n\nconst StyledHeader = styled.h1`\n  padding: 0.8rem;\n  color: ${props => props.theme.secondaryActionColor};\n`;\n\nconst StyledButton = styled(motion.button)`\n  width: 60px;\n  height: 60px;\n  margin-top: 2rem;\n  transition-duration: 0.2s;\n  background-color: ${props => props.theme.primaryBGColor};\n  color: ${props => props.theme.secondaryActionColor};\n  outline-style: none;\n  border: 1px solid ${props => props.theme.primaryActionColor};\n  cursor: pointer;\n  border-radius: ${props => props.theme.borderRadius};\n  z-index: 2;\n  font-size: 2rem;\n\n  :hover {\n    border: 2px solid ${props => props.theme.secondaryActionColor};\n  }\n\n  :focus {\n    background-color: ${props => props.theme.secondaryBgColor};\n  }\n\n @media only screen and (max-width: ${MEDIA_QUERY_SIZE}) {\n    margin-top:0;\n    margin-left: 160px;\n  }\n\n`;\n\nexport default function App() {\n  // * * *\n  // Theme handling\n  const [useDarkTheme, setUseDarkTheme] = useState(false);\n  const toggleTheme = () => setUseDarkTheme(!useDarkTheme);\n  let currentTheme = themeLight; // default\n  if (useDarkTheme === true) {\n    currentTheme = themeDark;\n  }\n  // * * *\n\n  const [currencyOptions, setCurrencyOptions] = useState([]);\n  const [fromCurrency, setFromCurrency] = useState();\n  const [toCurrency, setToCurrency] = useState();\n  const [exchangeRate, setExchangeRate] = useState();\n  const [amount, setAmount] = useState(1);\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true); // which card updated\n\n  let fromAmount, toAmount;\n  if (amountInFromCurrency) {\n    fromAmount = amount;\n    toAmount = cleanValueToTwoDecimalPlaces(amount * exchangeRate);\n  } else {\n    toAmount = amount;\n    fromAmount = cleanValueToTwoDecimalPlaces(amount / exchangeRate);\n  }\n\n  // Get the data on mount\n  useEffect(() => {\n    fetch(BASE_URL)\n      .then(res => res.json())\n      .then(data => {\n        const firstToCurrency = Object.keys(data.rates)[0];\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)]);\n\n        setFromCurrency(data.base);\n        setToCurrency(firstToCurrency);\n        setExchangeRate(data.rates[firstToCurrency]);\n      });\n  }, []);\n\n  // On currency change\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => {\n          setExchangeRate(data.rates[toCurrency]);\n        });\n    }\n  }, [fromCurrency, toCurrency]);\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value);\n    setAmountInFromCurrency(true);\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value);\n    setAmountInFromCurrency(false);\n  }\n\n  function handleSwitchCardValues() {\n    const _leftCurrency = fromCurrency;\n\n    const _rightAmount = toAmount;\n    const _rightCurrency = toCurrency;\n\n    // Set the left card\n    setAmount(_rightAmount);\n    setAmountInFromCurrency(true);\n    setFromCurrency(_rightCurrency);\n\n    // Set the right card\n    setToCurrency(_leftCurrency);\n  }\n\n  function handleBlurFromCurrency(e) {\n    setAmount(cleanValueToTwoDecimalPlaces(e.target.value));\n    setAmountInFromCurrency(true);\n  }\n  function handleBlurToCurrency(e) {\n    setAmount(cleanValueToTwoDecimalPlaces(e.target.value));\n    setAmountInFromCurrency(false);\n  }\n\n  function cleanValueToTwoDecimalPlaces(passedValue) {\n    var num = parseFloat(passedValue);\n    var cleanNum = num.toFixed(2);\n    return cleanNum;\n  }\n\n  return (\n    <ThemeProvider theme={currentTheme}>\n      <GlobalStyles />\n      <AppContainer>\n        <StyledHeader>Currency Converter</StyledHeader>\n        <StyledRow>\n          <Card\n            currencyOptions={currencyOptions}\n            selectedCurrency={fromCurrency}\n            onChangeCurrency={e => setFromCurrency(e.target.value)}\n            amount={fromAmount}\n            onChangeAmount={handleFromAmountChange}\n            onBlur={handleBlurFromCurrency}\n          />\n          <StyledButton\n            tabIndex=\"3\"\n            whileHover={{ scale: 1.3 }}\n            whileTap={{ scale: 1.2 }}\n            onClick={handleSwitchCardValues}\n          >\n            <i className=\"fas fa-arrows-alt-h\"></i>\n          </StyledButton>\n          <Card\n            currencyOptions={currencyOptions}\n            selectedCurrency={toCurrency}\n            onChangeCurrency={e => setToCurrency(e.target.value)}\n            amount={toAmount}\n            onChangeAmount={handleToAmountChange}\n            onBlur={handleBlurToCurrency}\n          />\n        </StyledRow>\n        <span>\n          Dark theme:\n          <ToggleSwitch\n            isOn={useDarkTheme}\n            onColor={themeDark.primaryActionColor}\n            handleToggle={() => toggleTheme()}\n            width=\"60px\"\n          />\n        </span>\n      </AppContainer>\n    </ThemeProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}